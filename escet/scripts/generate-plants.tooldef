from "lib:cif" import *;

if not exists("../plant"):
    mkdir("../plant");
end

list tuple(int, int) rovers = [(1, 1), (4, 2)];
tuple(int, int) bad_tile = (2, 2);

int W = 5;
int H = 3;

tool string mk_edge(int x, int y, string next):
    return fmt("        edge %7s goto X%dY%d;\n", next, x, y);
end

for i in range(rovers):
    tuple(int, int) rover = rovers[i];
    i = i + 1;
    string plant = "";
    plant = plant + "import \"../plant/events.cif\";\n\n";

    plant = plant + fmt("plant R%d:\n", i);
    for y in range(1, H):
        for x in range(1, W):
            string charged = { true: "Charged", false: "" }[contains(rovers, (x, y))];
            string initial = { true: " initial;", false: "" }[(x, y) == rover];
            string marked = { true: " marked;", false: "" }[contains(rovers, (x, y))];
            string bad_char = { true: "u", false: "" }[(x, y) == bad_tile];
            plant = plant + fmt("    location X%dY%d%s:%s%s\n", x, y, charged, initial, marked);
            if x != 1 :: plant = plant + mk_edge(x-1, y, bad_char + fmt("left%d", i));
            if x != W :: plant = plant + mk_edge(x+1, y, bad_char + fmt("right%d", i));
            if y != 1 :: plant = plant + mk_edge(x, y-1, bad_char + fmt("up%d", i));
            if y != H :: plant = plant + mk_edge(x, y+1, bad_char + fmt("down%d", i));
            if contains(rovers, (x, y)) :: plant = plant
                + fmt("    location X%dY%d:\n", x, y)
                + fmt("        edge charge%d goto X%dY%dCharged;\n", i, x, y);
        end
    end
    plant = plant + "end\n\n";

    plant = plant + fmt("plant R%dC:\n", i);
    for charge in range(0, 6):
        string initial_marked = "";
        if charge == 6 :: initial_marked = " initial; marked;";
        plant = plant + fmt("    location C%d:%s\n", charge, initial_marked);
        plant = plant + fmt("        edge charge%d goto C6;\n", i);
        if charge != 0 :: plant = plant + fmt("        edge left%1$d, right%1$d, up%1$d, down%1$d, uleft%1$d, uright%1$d, uup%1$d, udown%1$d goto C%2$d;\n", i, charge - 1);
    end
    plant = plant + "end\n\n";
    plant = plant + "svgfile \"plant.svg\";\n\n";

    plant = plant + fmt("svgout id \"rover%d\" attr \"x\" value\n", i);
    string keyword = "if  ";
    for y in range(1, H):
        for x in range(1, W):
            plant = plant + fmt("    %s R%d.X%dY%d: \"%d\"\n", keyword, i, x, y, 100 * x - 50);
            keyword = "elif";
            if contains(rovers, (x, y)) :: plant = plant + fmt("    %s R%d.X%dY%dCharged: \"%d\"\n", keyword, i, x, y, 100 * x - 50);
        end
    end
    plant = plant + "    else \"50\"\n";
    plant = plant + "    end;\n\n";

    plant = plant + fmt("svgout id \"rover%d\" attr \"y\" value\n", i);
    keyword = "if  ";
    for y in range(1, H):
        for x in range(1, W):
            plant = plant + fmt("    %s R%d.X%dY%d: \"%d\"\n", keyword, i, x, y, 100 * y - 50);
            keyword = "elif";
            if contains(rovers, (x, y)) :: plant = plant + fmt("    %s R%d.X%dY%dCharged: \"%d\"\n", keyword, i, x, y, 100 * y - 50);
        end
    end
    plant = plant + "    else \"50\"\n";
    plant = plant + "    end;\n\n";

    // TODO: batteries
    plant = plant + fmt("svgout id \"battery%d\" attr \"transform\" value\n", i);
    keyword = "if  ";
    for charge in range(0, 6):
        plant = plant + fmt("    %s R%dC.C%d: \"translate(%d) scale(%d, 1)\"\n", keyword, i, charge, 34 * charge, 6-charge);
        keyword = "elif";
    end
    plant = plant + "    else \"none\"\n";
    plant = plant + "    end;\n\n";

    writefile(fmt("../plant/rover%d.cif", i), plant);
end
